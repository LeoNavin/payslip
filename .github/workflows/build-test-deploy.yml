name: build-test-deploy

on: 
  push:
    branches:
      - main  # Trigger the action on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the action on pull requests to the main branch

jobs: 
  build:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu

    services:
      mysql:
        image: mysql:8.0  # Use MySQL 8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: payslip
        ports:
          - 3306:3306

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3  # Checkout the repository code

      - name: Install MySQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Wait for MySQL
        run: |
          timeout=300
          start_time=$(date +%s)
          until mysqladmin ping -h "127.0.0.1" -P 3306 --silent; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout reached, MySQL is not available."
              exit 1
            fi
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is up!"

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Set up Java environment
        with:
          distribution: 'temurin'  # Install the Temurin distribution of OpenJDK
          java-version: '17'  # Use Java 17
          cache: maven  # Cache Maven dependencies to speed up builds

      - name: Build with Maven
        run: mvn clean package  # Clean and build the project, generating the JAR file

      - name: Run the generated JAR file
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Use the secret for MySQL username
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Use the secret for MySQL password
        run: |
          java -jar target/*.jar > app.log 2>&1 &
          echo "Application started. Logs:"
          tail -n 10 app.log
          sleep 10  # Allow time for the application to start

      - name: Check if the service is running on port 8088
        run: |
          ss -tuln | grep 8088 || echo "Port 8088 is not open"

      - name: Check application health on port 8088
        run: |
          curl -I http://localhost:8088/health || echo "Service not reachable"

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3  # Upload the JAR file as an artifact
        with:
          name: java-app  # Name of the artifact
          path: target/*.jar  # Path to the JAR file in the target directory

  DeployDev:
    name: Deploy to Dev
    if: github.event_name == 'pull_request'
    needs: [build]
    runs-on: ubuntu-latest
    env:
      name: Development
      url: 'http://dev.payslip.com'
    steps:
      - name: Deploy
        run: echo I am deploying!

  DeployStaging:
    name: Deploy to Staging
    if: github.event.ref == 'refs/heads/main'
    needs: [build]
    runs-on: ubuntu-latest
    env:
      name: Staging
      url: 'http://test.payslip.com'
    steps:
      - name: Deploy
        run: echo I am deploying!

  DeployProd:
    name: Deploy to Production
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    # env:
    #   name: Production
    #   url: 'http://prod.payslip.com'
    # env:
    #  name: Production
    #  url: 'http://dev.payslip.com'
    #  MYSQL_HOST: 'localhost'
    #  MYSQL_PORT: '3306'
    #  MYSQL_DB: 'payslip'
    #  MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Set in GitHub secrets
    #  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Set in GitHub secrets
    # steps:
    #    - name: Checkout repository
    #      uses: actions/checkout@v3  # Ensure the code is checked out

    #    - name: Build with Maven
    #      run: mvn clean package  # Build the project

    #    - name: List target directory contents
    #      run: ls -al target/  # Verify JAR file creation

    #    - name: Print working directory
    #      run: pwd  # Confirm the working directory
      
    #    - name: Deploy
    #      run: java -jar target/*.jar --url=${{ env.url }}

    env:
      name: Production
      url: 'http://dev.payslip.com'
      MYSQL_HOST: 'localhost'  # Using localhost as the Docker container will be on the same network
      MYSQL_PORT: '3306'
      MYSQL_DB: 'payslip'
      MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Set in GitHub secrets
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Set in GitHub secrets
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: payslip
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # Wait for MySQL to be fully ready
      - name: Wait for MySQL
        run: |
          timeout=300
          start_time=$(date +%s)
          until mysqladmin ping -h "localhost" -P 3306 --silent; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout reached, MySQL is not available."
              exit 1
            fi
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is up!"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build with Maven
        run: mvn clean package

      - name: Run the generated JAR file
        run: |
          java -jar target/*.jar \
            --url=${{ env.url }} \
            --db-host=${{ env.MYSQL_HOST }} \
            --db-port=${{ env.MYSQL_PORT }} \
            --db-name=${{ env.MYSQL_DB }} \
            --db-user=${{ env.MYSQL_USER }} \
            --db-password=${{ env.MYSQL_PASSWORD }}
