name: build-test-deploy

on: 
  push:
    branches:
      - main  # Trigger the action on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the action on pull requests to the main branch

jobs: 
  build:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu

    services:
      mysql:
        image: mysql:8.0  # Use MySQL 8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: payslip
        ports:
          - 3306:3306
        # options: >-
          # --health-cmd="mysqladmin ping --silent"
          # --health-interval=10s
          # --health-timeout=5s
          # --health-retries=5

  #   services:
  # mysql:
  #   image: mysql:8.0
  #   env:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: payslip
  #   ports:
  #     - 3306:3306
  #   options: >
  #     --health-cmd="mysqladmin ping --silent"
  #     --health-interval=10s
  #     --health-timeout=5s
  #     --health-retries=5

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3  # Checkout the repository code

      # - name: Wait for MySQL
      #   run: |
      #       curl -L -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
      #       chmod +x wait-for-it.sh
      #       ./wait-for-it.sh mysql:3306 --timeout=30 --strict -- echo "MySQL is up"

      # - name: Check MySQL health
      #   run: |
      #     docker-compose exec mysql mysqladmin ping --silent || exit 1

      - name: Install MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server

      - name: Run MySQL setup script
        run: |
          chmod +x setup-mysql.sh
          ./setup-mysql.sh

      - name: Wait for MySQL
        run: |
          timeout=300
          start_time=$(date +%s)
          until mysqladmin ping -h "127.0.0.1" -P 3306 --silent; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout reached, MySQL is not available."
              exit 1
            fi
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is up!"



      - name: Set up JDK 17
        uses: actions/setup-java@v3  # Set up Java environment
        with:
          distribution: 'temurin'  # Install the Temurin distribution of OpenJDK
          java-version: '17'  # Use Java 17 (adjust to your version)
          cache: maven  # Cache Maven dependencies to speed up builds
          # Install Maven
          server-id: maven  # Optional: configure server credentials
          server-username: ${{ secrets.MAVEN_USERNAME }}
          server-password: ${{ secrets.MAVEN_PASSWORD }}

      - name: Build with Maven
        run: mvn clean package  # Clean and build the project, generating the JAR file

      - name: Run the generated JAR file
        env:
            MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Use the secret for MySQL username
            MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Use the secret for My
        run: java -jar target/*.jar  # Run the JAR file (assuming it is located in the target directory)

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3  # Upload the JAR file as an artifact
        with:
          name: java-app  # Name of the artifact
          path: target/*.jar  # Path to the JAR file in the target directory
          
      # Optional: Deploy step (e.g., pushing to a server, uploading to a repository)
      # You can add deployment steps here if required
