on: [pull_request]
name: mabl

jobs:
  test:
    name: Mabl Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          
      - name: Install dependencies
        run: npm ci

      - name: Run checks
        run: npm run check

      - name: Run Tests
        run: npm test

      - name: Compile Typescript
        run: npm run build

      - name: Run mabl tests against deployment
        id: mabl-test-deployment
        uses: ./
        env:
          MABL_API_KEY: ${{ secrets.MABL_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          application-id: D6uz-lhAGBYuTTc6Jj_w0Q-a
          environment-id: I9tfo2dWd7WSigXcO91feA-e
          browser-types: |
            chrome
          plan-labels: |
            canary
            smoke-test
          http-headers: |
            X-Test-Header-1: 1234
            X-Test-Header-2: 5678



  # DeployDev: 
  #   name: Deploy to Dev
  #   # if: github.event_name == 'pull_request'
  #   if: github.event.ref == 'refs/heads/main'
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   # env:
  #   #   name: Development
  #   #   url: 'http://dev.payslip.com'
  #   env:
  #     name: production
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: Deploy
  #       run: echo I am deploying!

  # DeployStaging:
  #   name: Deploy to Staging
  #   if: github.event.ref == 'refs/heads/main'
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   env:
  #     name: Staging
  #     url: 'http://test.payslip.com'
  #   steps:
  #     - name: Deploy
  #       run: echo I am deploying!
# this file is working for production with review also asked
  # deploy:
  #   name: Deploy to Production
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy
  #       id: deploy
  #       run: echo I am deploying!

  #     - name: Get deployment URL
  #       id: get-url
  #       run: echo "page_url=https://example.com" >> $GITHUB_ENV

  #   environment:
  #     name: production
  #     url: ${{ env.page_url }}

  # DeployProd:
  #   name: Deploy to Production
  #   needs: [DeployStaging]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: production
  #     url: ${{ steps.deployment.outputs.page_url }}
    # env:
    #   name: Production
    #   url: 'http://prod.payslip.com'
    # env:
    #  name: Production
    #  url: 'http://dev.payslip.com'
    #  MYSQL_HOST: 'localhost'
    #  MYSQL_PORT: '3306'
    #  MYSQL_DB: 'payslip'
    #  MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Set in GitHub secrets
    #  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Set in GitHub secrets
    # steps:
    #    - name: Checkout repository
    #      uses: actions/checkout@v3  # Ensure the code is checked out

    #    - name: Build with Maven
    #      run: mvn clean package  # Build the project

    #    - name: List target directory contents
    #      run: ls -al target/  # Verify JAR file creation

    #    - name: Print working directory
    #      run: pwd  # Confirm the working directory
      
    #    - name: Deploy
    #      run: java -jar target/*.jar --url=${{ env.url }}

    # env:
    #   name: Production
    #   url: 'http://dev.payslip.com'
    #   MYSQL_HOST: 'localhost'  # Using localhost as the Docker container will be on the same network
    #   MYSQL_PORT: '3306'
    #   MYSQL_DB: 'payslip'
    #   MYSQL_USER: ${{ secrets.MYSQL_USER }}  # Set in GitHub secrets
    #   MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}  # Set in GitHub secrets
    # services:
    #   mysql:
    #     image: mysql:8.0  # Use MySQL 8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: root
    #       MYSQL_DATABASE: payslip
    #     ports:
    #       - 3306:3306

    # steps: 
    #   - name: Checkout repository
    #     uses: actions/checkout@v3  # Checkout the repository code

    #   - name: Install MySQL client
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y mysql-client

    #   - name: Wait for MySQL
    #     run: |
    #       timeout=300
    #       start_time=$(date +%s)
    #       until mysqladmin ping -h "127.0.0.1" -P 3306 --silent; do
    #         current_time=$(date +%s)
    #         elapsed=$((current_time - start_time))
    #         if [ $elapsed -gt $timeout ]; then
    #           echo "Timeout reached, MySQL is not available."
    #           exit 1
    #         fi
    #         echo "Waiting for MySQL..."
    #         sleep 5
    #       done
    #       echo "MySQL is up!"


    #   - name: Set up JDK 17
    #     uses: actions/setup-java@v3
    #     with:
    #       distribution: 'temurin'
    #       java-version: '17'
    #       cache: maven

    #   - name: Build with Maven
    #     run: mvn clean package

    #   - name: Run the generated JAR file
    #     run: |
    #       java -jar target/*.jar \
    #         --url=${{ env.url }} \
    #         --db-host=${{ env.MYSQL_HOST }} \
    #         --db-port=${{ env.MYSQL_PORT }} \
    #         --db-name=${{ env.MYSQL_DB }} \
    #         --db-user=${{ env.MYSQL_USER }} \
    #         --db-password=${{ env.MYSQL_PASSWORD }}
