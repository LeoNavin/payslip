# # Sample workflow for building and deploying a Jekyll site to GitHub Pages
# name: Deploy Jekyll with GitHub Pages dependencies preinstalled

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches: ["main"]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   # Build job
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Setup Pages
#         uses: actions/configure-pages@v5
#       - name: Build with Jekyll
#         uses: actions/jekyll-build-pages@v1
#         with:
#           source: ./
#           destination: ./_site
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v3

#   # Deployment job
#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4



# name: Build and Deploy Java Application

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up JDK
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'  # Specify the Java version required

#       - name: Build with Maven
#         run: mvn clean install  # Replace with your build command

#       - name: Archive JAR file
#         uses: actions/upload-artifact@v3
#         with:
#           name: my-app-jar
#           path: target/my-app.jar  # Path to the JAR file

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Download JAR file
#         uses: actions/download-artifact@v3
#         with:
#           name: my-app-jar

#       - name: Run JAR file
#         run: |
#           java -jar target/*.jar --server.url=https://example.com
#         env:
#           SERVER_URL: https://example.com  # Environment variable, if needed

#       - name: Deploy application
#         run: echo "Deploying application..."
#         # Add deployment commands here if needed


name: Build and Deploy Java Application with MySQL

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Specify the Java version required

      - name: Build with Maven
        run: mvn clean install  # Replace with your build command

      - name: Archive JAR file
        uses: actions/upload-artifact@v3
        with:
          name: my-app-jar
          path: target/my-app.jar  # Path to the JAR file

  deploy:
    runs-on: ubuntu-latest
    needs: build
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: payslip
          MYSQL_USER: root
          MYSQL_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download JAR file
        uses: actions/download-artifact@v3
        with:
          name: my-app-jar

      - name: Run JAR file
        run: |
          java -jar target/my-app.jar --spring.datasource.url=jdbc:mysql://localhost:3306/payslip --spring.datasource.username=root --spring.datasource.password=root
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/payslip
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

      - name: Deploy application
        run: echo "Deploying application..."
        # Add deployment commands here if needed
